println """\
Welcome to Gradle $gradle.gradleVersion - http://www.gradle.org
Gradle home is set to: $gradle.gradleHomeDir
Gradle user directory is set to: $gradle.gradleUserHomeDir

Base directory: $projectDir
Running script ${relativePath(buildFile)}
"""

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.jfrog.bintray'
apply plugin: "com.gradle.plugin-publish"

group = 'com.google.protobuf'
version = '0.7.8-SNAPSHOT'

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" } // Mirrors jcenter() and mavenCentral()
    }

    dependencies {
        classpath 'com.google.guava:guava:19.0'
        classpath 'com.android.tools.build:gradle:2.2.0-alpha3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.4"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.12.0"
        classpath "junit:junit:4.12"
    }
}

allprojects {
    apply plugin: "com.github.ben-manes.versions"

    repositories {
        maven { url "https://plugins.gradle.org/m2/" } // Mirrors jcenter() and mavenCentral()
    }
}

subprojects {
    buildscript {
        repositories {
            mavenLocal()
            maven { url "https://plugins.gradle.org/m2/" } // Mirrors jcenter() and mavenCentral()
        }

        dependencies {
            classpath "com.google.protobuf:protobuf-gradle-plugin:${rootProject.version}"
        }
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'com.google.gradle:osdetector-gradle-plugin:1.4.0'
    compile 'commons-lang:commons-lang:2.6'

    testCompile 'junit:junit:4.12'
}

task sourcesJar(type: Jar, dependsOn:classes) {
     classifier = 'sources'
     from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn:groovydoc) {
     classifier = 'groovydoc'
     from groovydoc.destinationDir
}

task javadocJar(type: Jar, dependsOn:javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
}

artifacts {
     archives sourcesJar
     archives groovydocJar
     archives javadocJar
}

// The Gradle plugin portal doesn't allow signature files.
if (!gradle.startParameter.taskNames.intersect(['publishPlugins'])) {
  signing {
       required { isReleaseVersion }
       sign configurations.archives
  }
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        if (rootProject.hasProperty("ossrhUsername") && rootProject.hasProperty("ossrhPassword")) {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }
      }
      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        if (rootProject.hasProperty("ossrhUsername") && rootProject.hasProperty("ossrhPassword")) {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }
      }
      pom.project {
        name project.name
        description "Gradle build plugin to handle Protocol Buffers automated code generation and compilation"
        url "https://github.com/google/protobuf-gradle-plugin"
        licenses {
          license {
            name "BSD 3-Clause"
            url "http://opensource.org/licenses/BSD-3-Clause"
          }
        }
        developers {
          developer {
            id "zhangkun83"
            name "Kun Zhang"
            email "zhangkun@google.com"
          }
        }
        scm {
          connection "scm:git:git://github.com/google/protobuf-gradle-plugin.git"
          developerConnection "scm:git:git@github.com:google/protobuf-gradle-plugin.git"
          url "https://github.com/google/protobuf-gradle-plugin"
        }
      }
    }
  }
}

pluginBundle {
  website = 'https://github.com/google/protobuf-gradle-plugin'
  vcsUrl = 'https://github.com/google/protobuf-gradle-plugin'
  description = 'The Protobuf plugin provides protobuf compilation to your project.'

  plugins {
      protobufPlugin {
          id = 'com.google.protobuf'
          displayName = 'Protobuf Plugin for Gradle'
          tags = ['protobuf', 'protocol-buffers', 'protoc']
      }
  }
}

// Releases must be built on Java 1.7. Building on Java 1.8 will make the
// plugin runnable only on Java 1.8.
// See https://github.com/grpc/grpc-java/issues/805
task checkJavaVersion << {
  JavaVersion javaVersion = JavaVersion.current()
  if (!javaVersion.isJava7()) {
    throw new GradleException(
        "The plugin must be published under Java 1.7 but ${javaVersion} is found")
  }
}
[uploadArchives, publishPlugins]*.dependsOn checkJavaVersion

ext {
  // Shared test utility. Checks a JavaCompile task for the given sourceSet
  // includes the generated source dirs for the given codegenPlugins, and does
  // not include any other dirs under the generated code base dir.
  assertJavaCompileHasProtoGeneratedDir = {
      Project project, String sourceSet, JavaCompile compileJavaTask, Collection<String> codegenPlugins ->
    def baseDir = "${project.buildDir}/generated/source/proto/$sourceSet" as File
    // The expected direct subdirectories under baseDir
    def expectedDirs = codegenPlugins.collect { codegenPlugin ->
      "${project.buildDir}/generated/source/proto/$sourceSet/$codegenPlugin" as File
    } as Set

    def actualDirs = new HashSet()
    compileJavaTask.source.visit { fileVisitDetails ->
      // If the visited file is or is under a direct subdirectory of baseDir, add
      // that subdirectory to actualDirs.
      def file = fileVisitDetails.file
      while (true) {
        if (file.parentFile == baseDir) {
          actualDirs.add file
        }
        if (file.parentFile == null) {
          break
        }
        file = file.parentFile
      }
    }
    org.junit.Assert.assertEquals("sourceSet=${sourceSet}", expectedDirs, actualDirs)
  }
}
